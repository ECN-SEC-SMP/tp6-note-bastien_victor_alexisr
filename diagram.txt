@startuml





/' Objects '/

class BoardManager {
	+BoardManager(PlayerManager _playerManager)
	+~BoardManager()
	+getPlayerManager() : PlayerManager
	-playerManager : PlayerManager
	-nbHotels : int
	-nbHouses : int
	-board : std::vector<Space*>
	+getBoard() : std::vector<Space*>
	+affectProperty(Player* player, Space* space) : void
	+handleSpace() : void
	+movePlayer(int diceValue) : void
	+setBoard(std::vector<Space*> _board) : void
}


abstract class BuyableSpace {
	+BuyableSpace(std::string _name, int _price, std::vector<int> _rent)
	+~BuyableSpace()
	+getOwner() : Player* {query}
	-owner : Player*
	+getPrice() : int {query}
	-price : int
	+getRent() : std::vector<int> {query}
	-rent : std::vector<int>
	+{abstract} action(BoardManager* board) : void
	+setOwner(Player* _owner) : void
}


abstract class Card {
	+Card(std::string _description)
	+~Card()
	-description : std::string
	+getDescription() : std::string {query}
	+{abstract} action() : void
}


class Chance {
	+Chance()
	+~Chance()
	+operator<<(std::ostream& os, const Chance& chance) : std :: ostream&
	-name : std::string
	+action(BoardManager* board) : void
}


class ChanceCard {
	+ChanceCard(std::string _description)
	+~ChanceCard()
	+operator<<(std::ostream& os, const ChanceCard& card) : std :: ostream&
	+action() : void
}


class CommunityChest {
	+CommunityChest()
	+~CommunityChest()
	+operator<<(std::ostream& os, const CommunityChest& communityChest) : std :: ostream&
	-name : std::string
	+action(BoardManager* board) : void
}


class CommunityChestCard {
	+CommunityChestCard(std::string _description)
	+~CommunityChestCard()
	+operator<<(std::ostream& os, const CommunityChestCard& card) : std :: ostream&
	+action() : void
}


class Deck <template<typename T>> {
	+Deck()
	+~Deck()
	+pickCard() : T* {query}
	+operator<<(std::ostream& os, const Deck<T>& deck) : std :: ostream&
	-cards : std::vector<T*>
	+getCards() : std::vector<T*> {query}
	+addCard(T* card) : void
	+removeCard(T* card) : void
	+shuffle(std::mt19937& gen) : void
}


class Dice {
	+Dice()
	+~Dice()
	+getValue() : int {query}
	+roll(std::mt19937& gen) : int
	-value : int
}


class FreeParking {
	+FreeParking()
	+~FreeParking()
	+operator<<(std::ostream& os, const FreeParking& freeParking) : std :: ostream&
	-name : std::string
	+action(BoardManager* board) : void
}


class GameCore {
	+GameCore()
	+~GameCore()
	-boardManager : BoardManager
	+getBoardManager() : BoardManager
	-dice1 : Dice
	-dice2 : Dice
	+getPlayerManager() : PlayerManager
	-playerManager : PlayerManager
	-dicesSum : int
	+rollDice(std::mt19937& gen, Dice dice, std::optional<Dice> dice2) : int
	+playTurn(std::mt19937& gen) : void
	+startGame() : void
}


class Go {
	+Go()
	+~Go()
	+operator<<(std::ostream& os, const Go& go) : std :: ostream&
	-name : std::string
	+action(BoardManager* board) : void
}


class GoToJail {
	+GoToJail()
	+~GoToJail()
	+operator<<(std::ostream& os, const GoToJail& goToJail) : std :: ostream&
	-name : std::string
	+action(BoardManager* board) : void
}


class Jail {
	+Jail()
	+~Jail()
	+operator<<(std::ostream& os, const Jail& jail) : std :: ostream&
	-name : std::string
	+action(BoardManager* board) : void
}


class Player {
	+Player(std::string _name)
	+~Player()
	+getHasGetOutOfJailCard() : bool {query}
	+getIsBankrupt() : bool {query}
	-hasGetOutOfJailCard : bool
	-isBankrupt : bool
	+getMoney() : int {query}
	+getNbStationsOwned() : int {query}
	+getPosition() : int {query}
	+getRemainingTurnsInJail() : int {query}
	-money : int
	-nbStationsOwned : int
	-position : int
	-remainingTurnsInJail : int
	+getName() : std::string {query}
	-name : std::string
	+setHasGetOutOfJailCard(bool _hasGetOutOfJailCard) : void
	+setIsBankrupt(bool _isBankrupt) : void
	+setMoney(int _money) : void
	+setNbStationsOwned(int _nbStationsOwned) : void
	+setPosition(int _position) : void
	+setRemainingTurnsInJail(int _remainingTurnsInJail) : void
}


class PlayerManager {
	+PlayerManager()
	+~PlayerManager()
	-currentPlayer : Player*
	+getCurrentPlayer() : Player*
	+getNextPlayer() : Player*
	+getPlayer(int index) : Player*
	-nbPlayers : int
	-players : std::vector<Player>
	+addPlayer(Player* player) : void
	+removePlayer(Player* player) : void
	+setCurrentPlayer(Player* player) : void
	+transferMoney(Player* player1, Player* player2, int amount) : void
}


class Property {
	+Property(std::string _name, Color _color, int _price, std::vector<int> _rent)
	+~Property()
	-color : Color
	-nbBuildings : PropertyRent
	+getColor() : int {query}
	+getNbBuildings() : int {query}
	+operator<<(std::ostream& os, const Property& property) : std :: ostream&
	+action(BoardManager* board) : void
	+setNbBuildings(PropertyRent _nbBuildings) : void
}


abstract class Space {
	+Space(std::string _name)
	+~Space()
	+getName() : std::string {query}
	-name : std::string
	+{abstract} action(BoardManager* board) : void
}


class Station {
	+Station(std::string _name)
	+~Station()
	-price : int
	+operator<<(std::ostream& os, const Station& station) : std :: ostream&
	+action(BoardManager* board) : void
}


class Tax {
	+Tax(std::string _name, int _amount)
	+~Tax()
	-amount : int
	+getAmount() : int {query}
	+operator<<(std::ostream& os, const Tax& tax) : std :: ostream&
	-name : std::string
	+action(BoardManager* board) : void
}


class Utility {
	+Utility(std::string _name)
	+~Utility()
	-price : int
	+operator<<(std::ostream& os, const Utility& utility) : std :: ostream&
	+action(BoardManager* board) : void
}


enum Color {
	BLUE
	GREEN
	LIGHT_BLUE
	ORANGE
	PINK
	PURPLE
	RED
	YELLOW
}


enum PropertyRent {
	FOUR_HOUSES
	FULL_STREET
	HOTEL
	NO_HOUSE
	ONE_HOUSE
	THREE_HOUSES
	TWO_HOUSES
}





/' Inheritance relationships '/

.BuyableSpace <|-- .Property


.BuyableSpace <|-- .Station


.BuyableSpace <|-- .Utility


.Card <|-- .ChanceCard


.Card <|-- .CommunityChestCard


.Space <|-- .BuyableSpace


.Space <|-- .Chance


.Space <|-- .CommunityChest


.Space <|-- .FreeParking


.Space <|-- .Go


.Space <|-- .GoToJail


.Space <|-- .Jail


.Space <|-- .Tax





/' Aggregation relationships '/

.BoardManager *-- .PlayerManager


.BoardManager o-- .Space


.BuyableSpace o-- .Player


.GameCore *-- .BoardManager


.GameCore "2" *-- .Dice


.GameCore *-- .PlayerManager


.PlayerManager o-- .Player


.PlayerManager *-- .Player


.Property *-- .Color


.Property *-- .PropertyRent






/' Nested objects '/



@enduml
